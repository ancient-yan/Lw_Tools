apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
//    buildToolsVersion "29.0.0"
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "cn.com.rom.system"
        minSdkVersion 24
        targetSdkVersion 29
        //noinspection HighAppVersionCode
        versionCode 2019080901
        versionName "2019080901"
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                outputFileName = "${defaultConfig.applicationId}_${defaultConfig.versionName}.${outputFile.name}"
            }
        }
    }

    signingConfigs {
        haier {
            storeFile file('..\\..\\..\\private_as\\doc\\key\\haier_20190726.keystore')
            storePassword 'www.haier.com'
            keyAlias 'haier'
            keyPassword 'www.haier.com'
        }

        lw_out {
            storeFile file('E:\\github\\Doc\\android\\sign_key\\as_eclipse\\platform_lw_out.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.haier
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig debug.signingConfig
        }
    }
}

dependencies {
    compileOnly files('..\\..\\..\\..\\gitee\\EngineerMode\\jar\\framework_Android9.jar')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}

preBuild {
    doLast {
        def imlFile = file(project.name + ".iml")
        println 'Change ' + project.name + '.iml order'
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
            parsedXml.component[1].remove(jdkNode)
            def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
            new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
        }
    }
}
